{
  "name": "RxJava Examples",
  "tagline": "Functional Reactive Programming Examples",
  "body": "### Functional Reactive Programming - Key Principles.\r\n* A responsive, maintainable & Extensible application is the goal.\r\n* A responsive application is both scalable (Elastic) and resilient. \r\n* Responsiveness is impossible to achieve without both scalability and resilience.\r\n* A Message-Driven architecture is the foundation of scalable, resilient, and ultimately responsive systems.\r\n\r\n[Checkout the Tutorial: Slideshare presentation](http://www.slideshare.net/arafkarsh/functional-reactive-programming-64780160)\r\n\r\n### De Coupling\r\n1. Containment of Failures, Implementation Details, Responsibility\r\n2. Shared Nothing Architecture, Clear Boundaries\r\n3. Micro Services: Single Responsibility Principle \r\n\r\n### Single Component Pattern\r\nA Component shall do ONLY one thing, But do it in FULL.\r\nSingle Responsibility Principle By DeMarco : Structured Analysis & System Specification (Yourdon, New York, 1979)\r\n\r\n### Let-It-Crash Pattern\r\nPrefer a FULL component restart to complex internal failure handling.\r\nCandea & Fox: Crash-Only Software (USENIX HotOS IX, 2003)\r\nPopularized by Netflix Chaos Monkey. Erlang Philosophy\r\n\r\n### Saga Pattern\r\nDivide long-lived distributed transactions into quick local ones with compensating actions for recovery.\r\nPet Helland: Life Beyond Distributed Transactions CIDR 2007\r\n\r\n### Authors and Contributors\r\nAraf Karsh Hamid @arafkarsh \r\nSkype, Twitter, Facebook, LinkedIn, G+ : arafkarsh\r\n\r\n### Support or Contact\r\nHaving trouble with Pages? Check out our [documentation](https://help.github.com/pages) or [contact support](https://github.com/contact) and weâ€™ll help you sort it out.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}